package simplex;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

public class SimplexManager extends CustomManager {

	static final int STREAM_FREQUENCY = 150;
	static final LMemFrequency LMEM_FREQUENCY = LMemFrequency.MAX3_333;
	static final int FMEM_DEPTH = 10 * 1024;	// floats
	static final int VECTOR_DEPTH = 24;

	static final CPUTypes paramType = CPUTypes.UINT32;
	static final CPUTypes dataType = CPUTypes.FLOAT;
	static final int dataTypeSize = dataType.sizeInBytes();

	private void configBuild(EngineParameters ep) {
		BuildConfig bc = getBuildConfig();
		bc.setEnableTimingAnalysis(true);
		bc.setBuildEffort(Effort.HIGH);
		bc.setMPPRParallelism(4);
		bc.setMPPRRetryNearMissesThreshold(1000);
		bc.setMPPRCostTableSearchRange(1, 8);
		setBuildConfig(bc);
	}

	private void createKernelBlocks(LMemCommandGroup lmem) {
		// setup kernels
		KernelBlock pb = addKernel(new PivotingKernel(makeKernelParameters(PivotingKernel.NAME), FMEM_DEPTH, VECTOR_DEPTH));
		KernelBlock mb = addKernel(new MaxKernel(makeKernelParameters(MaxKernel.NAME)));
		KernelBlock rb = addKernel(new RatioKernel(makeKernelParameters(RatioKernel.NAME), VECTOR_DEPTH));

		// PivotingKernel inputs and outputs
		pb.getInput("pivot_col") <== addStreamFromCPU("pivot_col");
		pb.getInput("pivot_row") <== addStreamFromCPU("pivot_row");
		pb.getInput("tableau") <== lmem.addStreamFromLMem("tableau");
		lmem.addStreamToLMem("tableau_out") <==  pb.getOutput("tableau_out");

		// MaxKernel inputs
		mb.getInput("cost") <== pb.getOutput("cost");
		addStreamToCPU("cost") <== mb.getOutput("cost_out");

		// RatioKernel inputs
		rb.getInput("tableau_tail") <== pb.getOutput("tableau_tail");
	    rb.getInput("maxcol") <== mb.getOutput("maxcol");
		addStreamToCPU("ratio_out") <== rb.getOutput("ratio_out");
		addStreamToCPU("pivcol_out") <== rb.getOutput("pivcol_out");
	}

	private EngineInterface modeDefault() {
		EngineInterface ei = new EngineInterface();

		InterfaceParam m = ei.addParam("m", paramType);
		InterfaceParam n = ei.addParam("n", paramType);
		InterfaceParam row = ei.addParam("row", paramType);
		InterfaceParam col = ei.addParam("col", paramType);
		InterfaceParam pivot = ei.addParam("pivot", dataType);
		InterfaceParam length = m * n;
		InterfaceParam  zero = ei.addConstant(0l);

		// PivotingKernel
		ei.setTicks(PivotingKernel.NAME, length / VECTOR_DEPTH);
		ei.setScalar(PivotingKernel.NAME, "m", m);
		ei.setScalar(PivotingKernel.NAME, "n", n);
		ei.setScalar(PivotingKernel.NAME, "pivot", pivot);
		ei.setScalar(PivotingKernel.NAME, "row", row);
		ei.setScalar(PivotingKernel.NAME, "col", col);
		ei.setStream("pivot_col", dataType, m * dataTypeSize);
		ei.setStream("pivot_row", dataType, n * dataTypeSize);
		ei.setLMemLinear("tableau", zero, length * dataTypeSize);
		ei.setLMemLinear("tableau_out", zero, length * dataTypeSize);

		// MaxKernel
		InterfaceParam loopLength = ei.getAutoLoopOffset(MaxKernel.NAME, "loopLength");
		ei.ignoreAutoLoopOffset(MaxKernel.NAME, "loopLength");
		ei.setTicks(MaxKernel.NAME, loopLength * n);
		ei.setScalar(MaxKernel.NAME, "n", n);
		ei.setStream("cost", dataType, n * dataTypeSize);

		// RatioKernel
		ei.setTicks(RatioKernel.NAME, length / VECTOR_DEPTH);
		ei.setScalar(RatioKernel.NAME, "n", n);
		ei.setStream("ratio_out", dataType,  m * dataTypeSize);
		ei.setStream("pivcol_out", dataType, m * dataTypeSize);

		ei.ignoreAll(Direction.IN);
		return ei;
	}

	private EngineInterface ifaceReadRows(LMemCommandGroup lmem) {
		addStreamToCPU("rows_fromlmem") <== lmem.addStreamFromLMem("rows_tocpu");

		EngineInterface ei = new EngineInterface("ReadRows");
		InterfaceParam start = ei.addParam("start", paramType);
		InterfaceParam rowlen = ei.addParam("rowlen", paramType);
		InterfaceParam count = ei.addParam("count", paramType);
		ei.setStream("rows_fromlmem", dataType, count * rowlen * dataTypeSize);
		ei.setLMemLinear("rows_tocpu", start * rowlen * dataTypeSize, count * rowlen * dataTypeSize);
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	private EngineInterface ifaceWriteRows(LMemCommandGroup lmem) {
		lmem.addStreamToLMem("rows_fromcpu") <==  addStreamFromCPU("rows_tolmem");

		EngineInterface ei = new EngineInterface("WriteRows");
		InterfaceParam start = ei.addParam("start", paramType);
		InterfaceParam rowlen = ei.addParam("rowlen", paramType);
		InterfaceParam count = ei.addParam("count", paramType);
		ei.setStream("rows_tolmem", dataType, count * rowlen * dataTypeSize);
		ei.setLMemLinear("rows_fromcpu", start * rowlen * dataTypeSize, count * rowlen * dataTypeSize);
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	private EngineInterface ifaceReadCols(LMemInterface lmem) {
		addStreamToCPU("cols_fromlmem") <== lmem.addStreamFromLMem("cols_tocpu", LMemCommandGroup.MemoryAccessPattern.STRIDE_2D);

		EngineInterface ei = new EngineInterface("ReadCols");
		InterfaceParam start = ei.addParam("start", paramType);
		InterfaceParam rowlen = ei.addParam("rowlen", paramType);
		InterfaceParam collen = ei.addParam("collen", paramType);
		InterfaceParam strideMode = ei.addConstant(1);
		ei.setStream("cols_fromlmem", dataType, collen * dataTypeSize);
		ei.setLMemStrided("cols_tocpu", start * dataTypeSize, rowlen * dataTypeSize, collen * dataTypeSize, strideMode);
		ei.ignoreAll(Direction.IN_OUT);
		return ei;
	}

	public SimplexManager(EngineParameters ep) {
		super(ep);
		configBuild(ep);

		config.setDefaultStreamClockFrequency(STREAM_FREQUENCY);
		config.setOnCardMemoryFrequency(LMEM_FREQUENCY);

		LMemInterface iface = addLMemInterface();
		LMemCommandGroup lmem = iface.addCommandGroup("control", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);

		createKernelBlocks(lmem);
		createSLiCinterface(modeDefault());

		createSLiCinterface(ifaceReadRows(lmem));
		createSLiCinterface(ifaceWriteRows(lmem));
		createSLiCinterface(ifaceReadCols(iface));

        addMaxFileConstant("STREAM_FREQUENCY", STREAM_FREQUENCY);
        addMaxFileStringConstant("LMEM_FREQUENCY", LMEM_FREQUENCY.toString());
        addMaxFileConstant("FMEM_DEPTH", FMEM_DEPTH);
		addMaxFileConstant("VECTOR_DEPTH", VECTOR_DEPTH);
	}

	public static void main(String[] args) {
		SimplexManager manager = new SimplexManager(new EngineParameters(args));
		manager.build();
	}

}
