package simplex;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class RatioKernel extends Kernel {

	public static final String NAME = RatioKernel.class.getSimpleName();

    static final DFEType dataType = dfeFloat(8, 24);
    static final DFEType idxType = dfeUInt(32);

	protected RatioKernel(KernelParameters parameters, int vectorDepth) {
		super(parameters);

        final DFEVectorType<DFEVar> vecType = new DFEVectorType<DFEVar>(dataType, vectorDepth);

        DFEVar n = io.scalarInput("n", idxType);

		DFEVar tick = control.count.simpleCounter(32);
		DFEVar first = control.count.pulse(1); // tick === 0;
		DFEVar firstrow = tick < n / vectorDepth;
		DFEVector<DFEVar> j = control.count.simpleCounterVect(vectorDepth, 32, n);

		DFEVar col = io.input("maxcol", idxType, first);
		DFEVector<DFEVar> A = io.input("Atail", vecType, ~firstrow);
		DFEVar b = Reductions.streamHold(A[0], j[0] === 0);

		DFEVector<DFEVar> iscol = j === col;
		DFEVar select = iscol.pack().cast(dfeUInt(vectorDepth));
		DFEVar AA = control.oneHotMux(select, A.packToList());

		DFEVar ratio = firstrow ? 0 : b / AA;
		DFEVar pivcol = firstrow ? 0 : AA;
		DFEVar fire = select > 0;
		io.output("ratio_out", ratio, dataType, fire);
		io.output("pivcol_out", pivcol, dataType, fire);

		/*j.get(0).simWatch("j_0");
		col.simWatch("col");
		firstrow.simWatch("firstrow");
		A.simWatch("A");
		b.simWatch("b");
		iscol.simWatch("iscol");
		select.simWatch("selec");
		fire.simWatch("fire");
		AA.simWatch("AA");
		ratio.simWatch("ratio");
		pivcol.simWatch("pivcol");
		//*/
	}
}
