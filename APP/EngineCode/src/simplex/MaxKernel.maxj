package simplex;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;


public class MaxKernel extends Kernel {

	public static final String NAME = MaxKernel.class.getSimpleName();

    static final DFEType dataType = dfeFloat(8, 24);
    static final DFEType idxType = dfeUInt(32);

	protected MaxKernel(KernelParameters parameters) {
		super(parameters);

		OffsetExpr loopLength = stream.makeOffsetAutoLoop("loopLength");
		DFEVar loopLengthVal = loopLength.getDFEVar(this, dfeUInt(8));

		DFEVar n = io.scalarInput("n", idxType);

		CounterChain chain = control.count.makeCounterChain();
		DFEVar i = chain.addCounter(n, 1);
		DFEVar l = chain.addCounter(loopLengthVal, 1);

		DFEVar c = io.input("c", dataType, l === 0);

		DFEVar oldmaxval = dataType.newInstance(this);
		DFEVar greater = c > oldmaxval;
		DFEVar maxval = Reductions.streamHold(c, greater);
		oldmaxval <== stream.offset(maxval, -loopLength);

		DFEVar maxidx = Reductions.streamHold(i, greater);

		io.output("c_out", c, dataType, l === 0);
		io.scalarOutput("maxcol_out", maxidx, idxType);
		io.output("maxcol", maxidx, idxType, i === n - 1);

		/*loopLengthVal.simWatch("loopLengthVal");
		i.simWatch("i");
		l.simWatch("l");
		c.simWatch("c");
		oldmaxval.simWatch("oldmaxval");
		greater.simWatch("greater");
		maxval.simWatch("maxval");
		maxidx.simWatch("maxidx");
		//*/
	}

}
